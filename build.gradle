/*
 * Copyright 2000-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.1-2'
        classpath "com.moowork.gradle:gradle-node-plugin:0.11"
        classpath "gradle.plugin.com.github.jk1:tcdeps:0.9.1"
    }
}

def kotlinVersions = file('kotlin.web.demo.backend/compilers/versions').list();

configure(subprojects.findAll { it.name != 'kotlin.web.demo.frontend' }) {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }

    sourceSets {
        main {
            java {
                srcDir 'src'
            }
        }
    }

    dependencies {
        compile 'commons-logging:commons-logging:1.2'
    }
}

for (kotlinVersion in kotlinVersions) {
    def projectsName = ":kotlin.web.demo.backend:compilers:versions:$kotlinVersion"
    project(projectsName) {
        apply plugin: 'com.github.jk1.tcdeps'
        repositories {
            teamcityServer {
                url = 'http://teamcity.jetbrains.com'
            }
        }
        configurations {
            kotlin
            kotlinJS
            compile.extendsFrom(kotlin)
        }
        dependencies {
            compile project(":kotlin.web.demo.backend:compilers")
            kotlin tc("bt345:$kotlinVersion:internal/kotlin-compiler-before-shrink.jar")
            kotlin tc("bt345:$kotlinVersion:kotlin-plugin-${kotlinVersion}.zip!/Kotlin/lib/kotlin-plugin.jar")
            kotlin tc("bt345:$kotlinVersion:kotlin-plugin-${kotlinVersion}.zip!/Kotlin/lib/kotlin-runtime.jar")
            kotlin tc("bt345:$kotlinVersion:kotlin-plugin-${kotlinVersion}.zip!/Kotlin/kotlinc/lib/kotlin-reflect.jar")
            kotlin tc("bt345:$kotlinVersion:kotlin-plugin-${kotlinVersion}.zip!/Kotlin/kotlinc/lib/kotlin-test.jar")
            kotlinJS tc("bt345:$kotlinVersion:kotlin-plugin-${kotlinVersion}.zip!/Kotlin/kotlinc/lib/kotlin-jslib.jar")
        }
    }
}

project("kotlin.web.demo.backend") {
    apply plugin: 'war'
    webAppDirName = 'web'

    dependencies {
        compile project(":kotlin.web.demo.backend:compilers")
        compile project(":kotlin.web.demo.executors")
        compile project(":kotlin.web.demo.common")
        providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    }

    war {
        from(project(':kotlin.web.demo.executors').projectDir) {
            include 'executors.policy.template'
        }

        for (kotlinVersion in kotlinVersions) {
            def wrapperProject = project(":kotlin.web.demo.backend:compilers:versions:$kotlinVersion")
            from(wrapperProject.sourceSets.main.output) {
                into("WEB-INF/kotlin-wrappers/$kotlinVersion/classes")
            }
            from(wrapperProject.configurations['kotlinJS'].collect { zipTree(it) }) {
                into "WEB-INF/kotlin-wrappers/$kotlinVersion/js"
            }
            from(wrapperProject.configurations['kotlin']) {
                into "WEB-INF/kotlin-wrappers/$kotlinVersion/kotlin"
            }
        }
    }
}

project("kotlin.web.demo.executors") {
    dependencies {
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.7.4'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.4'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.7.4'
        compile group: 'junit', 'name': 'junit', 'version': '4.12'
    }
}

project(':kotlin.web.demo.frontend') {
    apply plugin: 'kotlin2js'
    apply plugin: 'com.moowork.node'

    repositories {
        mavenCentral()
        maven {
            url "http://dl.bintray.com/kotlinx/kotlinx"
        }
    }

    dependencies {
        compile 'org.jetbrains.kotlin:kotlin-js-library:1.0.1-2'
        compile "org.jetbrains.kotlinx:kotlinx.html.js:0.5.8"
    }

    sourceSets {
        main {
            kotlin {
                srcDir 'src'
            }
        }
    }

    compileKotlin2Js.kotlinOptions.outputFile = "${projectDir}/static/kotlin.web.demo.frontend.js"


    task bowerInstall(type: NodeTask,dependsOn: npmInstall){
        script = file('node_modules/bower/bin/bower')
        args = ['install']
    }
    build.dependsOn('bowerInstall')

    node {
        version='4.0.0'
        download = true
    }

    task copyJsFilesFromDependencies(dependsOn: build) {
        configurations.compile.each { File file ->
            copy {
                includeEmptyDirs = false

                from zipTree(file.absolutePath)
                into "${projectDir}/static/lib"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && !path.endsWith(".meta.js") &&
                            (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
                }
            }
        }
    }
}

project("kotlin.web.demo.server") {
    apply plugin: 'war'

    webAppDirName = 'web'
    dependencies {
        compile project(":kotlin.web.demo.common")
        compile group: 'org.scribe', name: 'scribe', version: '1.3.7'
        compile group: 'org.jetbrains', name: 'annotations', version: '13.0'
        compile 'org.twitter4j:twitter4j-core:4.0.4'
        compile 'com.nimbusds:nimbus-jose-jwt:3.9'
        compile 'org.pegdown:pegdown:1.5.0'
        runtime 'org.tuckey:urlrewritefilter:4.0.4'
    }

    war {
        dependsOn ':kotlin.web.demo.frontend:build'
        from('examples'){
            into 'examples'
        }
        from('help')
        from("${project(':kotlin.web.demo.frontend').projectDir}/static") {
            into 'static'
        }
        from("${project(':kotlin.web.demo.frontend').projectDir}/index.html")
        for (kotlinVersion in kotlinVersions) {
            def wrapperProject = project(":kotlin.web.demo.backend:compilers:versions:$kotlinVersion")
            from(wrapperProject.configurations['kotlinJS'].collect { zipTree(it) }) {
                include "kotlin.js"
                into "static/kotlin/${kotlinVersion}"
            }
        }
    }
}

project("kotlin.web.demo.common") {
    dependencies {
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.7.4', transitive: true
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.4', transitive: true
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.7.4', transitive: true
        compile group: 'javax.servlet', name: 'servlet-api', version: '2.4', transitive: true
    }
}

project(':kotlin.web.demo.backend:compilers:versions').jar { onlyIf { false } }